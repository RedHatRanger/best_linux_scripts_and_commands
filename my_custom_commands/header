#!/usr/bin/env bash

### SAVE TO /usr/local/bin/header #############################################
# Behavior summary (Created by Brian MacFarlane, written in Claude Sonnet):
# - If Author exists: preserved as-is.
# - If Author missing: added with the provided or current user.
# - Modified By: always set to the provided or current user on updates; added on new headers.
# - Created On: preserved if present; otherwise set once.
# - Last Modified: always updated.
# - Description: preserved unless you pass --desc "-" to force preserving
# - Version: starts at v1.0 and increments by 0.1 on each modification
############################################################################

set -euo pipefail

usage() {
  cat <<'EOF' | less
Usage: header [OPTIONS] FILE [FILE2 ...]
Adds or updates a standardized header at the top of the given files.

Header fields:
  - File: <name of the file>
  - Author: <preserved if exists; otherwise set to provided or current user; use --force-author to overwrite>
  - Created On: <preserved if exists; otherwise set once (YYYY-MM-DD HH:MM:SS)>
  - Last Modified: <always updated (YYYY-MM-DD HH:MM:SS)>
  - Modified By: <author of the last modification>
  - Description: <set if provided, preserved if "-", otherwise "TODO: Add description">
  - Version: <starts at v1.0 and increments by 0.1 on each modification>

Options:
  -a, --author NAME        Author name to use (default: $(whoami))
  -m, --modified-by NAME   Modified By name to use (default: $(whoami))
  -d, --desc TEXT          Description to set. Use "-" to preserve existing Description.
  -f, --force-author       Overwrite existing Author with the provided name.
  -h, --help               Show this help and exit.

Examples:
- ADDING A NEW HEADER TO A FILE:
  # Add a new header to a file without one (verbose)
  header --author "Alice" --desc "Production Configuration Template" sample.yaml
  OR
  # Add a new header to a file without one (short)
  header -a "Alice" -d "Production Configuration Template" sample.yaml

- UPDATE AN EXISTING HEADER:
  # Set different Author and Modified By (useful for team edits)
  header -m "Bob" -d "Alice's code, modified by Bob" sample_with_header.yaml

- REPLACE THE AUTHOR BY FORCE:
  # Force replace the Author on an existing header (must be used with --author)
  header --author "Bob" --force-author app.yaml
  OR
  # Force replace the Author on an existing header (must be used with -a)
  header -a "Bob" -f -m "Charlie" app.yaml

- ADJUST HEADERS ON MULTIPLE FILES:
  # Update multiple files at once
  header --author devops --desc "Infra configs" config1.yaml config2.yaml

Notes:
  - Preserves shebang (#!) on the first line if present (useful for Bash and Python scripts)
  - Preserves original file permissions.

Credits:
Created by Brian MacFarlane
Written in Claude Opus 4.1
EOF
}

author="$(whoami)"
modified_by="$(whoami)"
desc=""
force_author="0"
update_desc="0"
files=()

# Parse args
while [[ $# -gt 0 ]]; do
  case "$1" in
    -a|--author)
      [[ $# -lt 2 ]] && { echo "Missing value for --author" >&2; exit 1; }
      author="$2"; shift 2 ;;
    -m|--modified-by)
      [[ $# -lt 2 ]] && { echo "Missing value for --modified-by" >&2; exit 1; }
      modified_by="$2"; shift 2 ;;
    -d|--desc)
      [[ $# -lt 2 ]] && { echo "Missing value for --desc" >&2; exit 1; }
      desc="$2"; shift 2 ;;
    -f|--force-author)
      force_author="1"; shift ;;
    -h|--help)
      usage; exit 0 ;;
    -*)
      echo "Unknown option: $1" >&2; usage; exit 1 ;;
    *)
      files+=("$1"); shift ;;
  esac
done

[[ ${#files[@]} -eq 0 ]] && { usage; exit 1; }

# Description update behavior
if [[ -n "$desc" && "$desc" != "-" ]]; then
  update_desc="1"
fi

# Portable perms (Linux/macOS)
get_perms() {
  local f="$1"
  stat -c '%a' "$f" 2>/dev/null || stat -f '%Lp' "$f" 2>/dev/null || echo ""
}

now="$(date '+%Y-%m-%d %H:%M:%S')"

process_file() {
  local file="$1"

  # Ensure file exists
  [[ -f "$file" ]] || : > "$file"

  local perms tmp body shebang firstline
  perms="$(get_perms "$file")"
  tmp="$(mktemp)" || exit 1
  body="$(mktemp)" || { rm -f "$tmp"; exit 1; }
  trap 'rm -f "$tmp" "$body"' EXIT

  if [[ -s "$file" ]]; then
    read -r firstline < "$file" || true
    if [[ "${firstline:-}" =~ ^#! ]]; then
      shebang="$firstline"
      tail -n +2 "$file" > "$body"
    else
      cat "$file" > "$body"
    fi
  else
    : > "$body"
  fi

  if grep -q "^# File: $(basename "$file")$" "$file" 2>/dev/null; then
    # Update existing header with version increment
    awk -v author="$author" \
        -v modified_by="$modified_by" \
        -v desc="$desc" \
        -v update_desc="$update_desc" \
        -v now="$now" \
        -v created_now="$now" \
        -v force_author="$force_author" '
      function inc_version(v,    major, minor, new_minor, new_version) {
        # v expected format: vX.Y
        if (match(v, /^v([0-9]+)\.([0-9]+)$/, arr)) {
          major = arr[1]
          minor = arr[2] + 0
          new_minor = minor + 1
          # Keep one decimal place, so if minor >= 10, roll over
          if (new_minor >= 10) {
            major += 1
            new_minor = 0
          }
          new_version = "v" major "." new_minor
          return new_version
        }
        return "v1.0"
      }
      BEGIN { in_hdr=1; seen_created=0; seen_lastmod=0; seen_desc=0; seen_modby=0; seen_author=0; seen_version=0; version="v1.0" }
      NR==1 && $0 ~ /^#!/ { print; next }
      {
        if (in_hdr) {
          if ($0 ~ /^#\s*$/) {
            if (!seen_version) { print "# Version: v1.0" }
            else { print "# Version: " version }
            if (!seen_created) { print "# Created On: " created_now }
            if (!seen_lastmod) { print "# Last Modified: " now }
            if (!seen_modby)   { print "# Modified By: " modified_by }
            if (!seen_author)  { print "# Author: " author }
            if (update_desc=="1" && !seen_desc) { print "# Description: " desc }
            print
            in_hdr=0
            next
          }

          if ($0 ~ /^# *Version:/) {
            seen_version=1
            # Increment version
            split($0, parts, ":")
            ver = gensub(/^[ \t]+/, "", "g", parts[2])
            version = inc_version(ver)
            print "# Version: " version
            next
          }

          # Created On normalization
          if ($0 ~ /^# *Created On:/) { seen_created=1; print; next }
          if ($0 ~ /^# *Date Created:/) {
            line=$0; sub(/^# *Date Created: */, "", line)
            print "# Created On: " line
            seen_created=1; next
          }
          if ($0 ~ /^# *Date:/) {
            line=$0; sub(/^# *Date: */, "", line)
            print "# Created On: " line
            seen_created=1; next
          }

          # Author: preserve existing value unless --force-author is set
          if ($0 ~ /^# *Author:/) {
            seen_author=1
            if (force_author=="1") { print "# Author: " author } else { print }
            next
          }

          # Last Modified: always update to now
          if ($0 ~ /^# *Last Modified:/) { print "# Last Modified: " now; seen_lastmod=1; next }

          # Modified By: always set to current modified_by
          if ($0 ~ /^# *Modified By:/) { print "# Modified By: " modified_by; seen_modby=1; next }

          # Description
          if ($0 ~ /^# *Description:/) {
            if (update_desc=="1") { print "# Description: " desc } else { print }
            seen_desc=1; next
          }

          print; next
        }
        print
      }
    ' "$file" > "$tmp"
  else
    # Create new header with version v1.0
    {
      [[ -n "${shebang:-}" ]] && echo "$shebang"
      echo "# File: $(basename "$file")"
      echo "# Author: $author"
      echo "# Created On: $now"
      echo "# Last Modified: $now"
      echo "# Modified By: $modified_by"
      echo "# Version: v1.0"
      echo "# Description: ${desc:-TODO: Add description}"
      echo "#"
      echo
      cat "$body"
    } > "$tmp"
  fi

  mv "$tmp" "$file"
  rm -f "$body"
  trap - EXIT
  [[ -n "$perms" ]] && chmod "$perms" "$file"
}

for f in "${files[@]}"; do
  process_file "$f"
done
